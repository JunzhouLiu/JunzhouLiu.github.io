(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{284:function(t,n,a){"use strict";a.r(n);var e=a(0),s=Object(e.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("em",[t._v("这周搜索类题目做的比较多")])]),t._v(" "),a("p",[t._v("keywords{搜索，递归，剪枝，筛选，排序，去重"),a("code",[t._v("unique")]),t._v("，二分查找"),a("code",[t._v("lower_bound")]),t._v(" "),a("code",[t._v("upper_bound")]),t._v(" };")]),t._v(" "),a("ul",[a("li",[t._v("No:1 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T126",target:"_blank",rel:"noopener noreferrer"}},[t._v("带分数"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("No:2 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T352",target:"_blank",rel:"noopener noreferrer"}},[t._v("排列数"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("No:3 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T28",target:"_blank",rel:"noopener noreferrer"}},[t._v("错误票据"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("No:4 "),a("a",{attrs:{href:""}},[t._v("剪邮票")])]),t._v(" "),a("li",[t._v("No:5 "),a("a",{attrs:{href:""}},[t._v("机器人繁殖")])]),t._v(" "),a("li",[t._v("No:6 "),a("a",{attrs:{href:""}},[t._v("递增三元组")])]),t._v(" "),a("li",[t._v("No:7 "),a("a",{attrs:{href:""}},[t._v("第几个幸运数")])]),t._v(" "),a("li",[t._v("No:8 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T30",target:"_blank",rel:"noopener noreferrer"}},[t._v("连号区间"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("No:9 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T24",target:"_blank",rel:"noopener noreferrer"}},[t._v("核桃的数量"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"no-1-带分数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-1-带分数","aria-hidden":"true"}},[t._v("#")]),t._v(" No:1 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T126",target:"_blank",rel:"noopener noreferrer"}},[t._v("带分数"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("很常规的搜索题,搜索范围$9!$,第一时间想到用"),a("code",[t._v("next_permutation")]),t._v("将所1-9进行全排列，然后进行分割筛选,因为N最大是$1000^2$,所以整数部分最大也就六位,分母分子至少1位，分割规律也就出来了。其中筛选条件应该满足整数部分小于N,小数部分大于1，且值为整")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nint n,cnt=0;\nint lis[10]= {0};\nbool vis[10]= {0};\nvoid check() {\n\tint inte=0,num=0,deno=0;\n\tfor (int i=0; i<=6; i++) {\n\t\tinte=inte*10+lis[i];\n\t\tif (inte>=n) {\n\t\t\tbreak;\n\t\t}\n\t\tnum=0;\n\t\tfor (int j=i+1; j<=7; j++) {\n\t\t\tnum=num*10+lis[j];\n\t\t\tdeno=0;\n\t\t\tint k=j+1;\n\t\t\tfor (; k<=8; k++) {\n\t\t\t\tdeno=deno*10+lis[k];\n\t\t\t\tif (deno>num) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(k>=8) {\n\t\t\t\tif(n==inte+num/deno&&num%deno==0) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int depth) {\n\tif(depth==9) {\n\t\tcheck();\n\t\treturn;\n\t}\n\tfor(int i=1; i<10; i++) {\n\t\tif(vis[i]==0) {\n\t\t\tvis[i]=true;\n\t\t\tlis[depth]=i;\n\t\t\tdfs(depth+1);\n\t\t\tvis[i]=false;\n\t\t}\n\t}\n}\n\nint main(int argc, char** argv) {\n\tcin>>n;\n\tdfs(0);\n\tcout<<cnt;\n\treturn 0;\n}\n")])])]),a("h2",{attrs:{id:"no-2-排列数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-2-排列数","aria-hidden":"true"}},[t._v("#")]),t._v(" No:2 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T352",target:"_blank",rel:"noopener noreferrer"}},[t._v("排列数"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("dfs部分的代码和第一题类似，将0-9全排列的同时并计数，符合条件输出当前排列。")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nint n,cnt=0,lis[11]= {0};\nbool vis[11]= {0};\nvoid dfs(int depth) {\n\tif(depth>=10) {\n\t\tcnt++;\n\t\tif(cnt==n) {\n\t\t\tfor(int i=0; i<10; i++) {\n\t\t\t\tcout<<lis[i];\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tfor(int i=0; i<=9; i++) {\n\t\tif(vis[i]==0) {\n\t\t\tvis[i]=true;\n\t\t\tlis[depth]=i;\n\t\t\tdfs(depth+1);\n\t\t\tvis[i]=false;\n\t\t}\n\t}\n}\nint main(int argc, char** argv) {\n\tcin>>n;\n\tdfs(0);\n}\n")])])]),a("h2",{attrs:{id:"no-3-错误票据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-3-错误票据","aria-hidden":"true"}},[t._v("#")]),t._v(" No:3 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T28",target:"_blank",rel:"noopener noreferrer"}},[t._v("错误票据"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("检测EOF作为数据输入是否结束，使用vector进行排序，遍历就可以了")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char** argv) {\n\tint n;\n\tcin>>n;\n\tvector<int> lis;\n\tint input,a,b;\n\twhile(cin>>input&&input!=EOF) {\n\t\tlis.push_back(input);\n\t}\n\tsort(lis.begin(),lis.end());\n\tfor(vector<int>::iterator i=lis.begin(); i<lis.end()-1; i++) {\n\t\tif(*(i+1)-*i==0) {\n\t\t\ta=*i;\n\t\t} else if(*(i+1)-*i==2) {\n\t\t\tb=*i+1;\n\t\t}\n\t}\n\tcout<<b<<" "<<a;\n\treturn 0;\n}\n')])])]),a("h2",{attrs:{id:"no-4-剪邮票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-4-剪邮票","aria-hidden":"true"}},[t._v("#")]),t._v(" No:4 "),a("a",{attrs:{href:""}},[t._v("剪邮票")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("剪邮票\n有12张连在一起的12生肖的邮票。\n现在你要从中剪下5张来，要求必须是连着的。\n（仅仅连接一个角不算相连）\n\n请你计算，一共有多少种不同的剪取方法。\n\n请填写表示方案数目的整数。\n注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。\n")])])]),a("p",[a("em",[t._v("dfs搜索五个点，然后dfs判断是否满足要求")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nconst int r = 3, c = 4;\nbool vis[3][4]= {false};\nint cnt;\nint dir[4][2] = {\n\t{0, 1},\n\t{1, 0},\n\t{0, -1 },\n\t{ -1, 0},\n};//四种状态\n\nbool check(int x, int y) {\n\tif (x < 0 || x >= r || y < 0 || y >= c || vis[x][y]) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nvoid dfs(int x, int y, int n) {\n\tif (n == 5) {\n\t\tcnt++;\n\t\treturn ;\n\t}\n\tfor (int i = 0; i < 4; i++) {\n\t\tint nx = x + dir[i][0];\n\t\tint ny = y + dir[i][1];\n\t\tif (check(nx, ny)) {\n\t\t\tvis[nx][ny] = true;\n\t\t\tdfs(nx, ny, n + 1);\n\t\t\tvis[nx][ny] = false;\n\t\t}\n\t}\n}\n\nint main(int argc, char** argv) {\n\n\tfor (int i = 0; i < r; i++) {\n\t\tfor (int j = 0; j < c; j++) {\n\t\t\tvis[i][j] = true;\n\t\t\tdfs(i, j, 1);\n\t\t\tvis[i][j] = false;\n\t\t}\n\t}\n\tcout << cnt/5;\n\treturn 0;\n}\n\n")])])]),a("h2",{attrs:{id:"no-5-机器人繁殖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-5-机器人繁殖","aria-hidden":"true"}},[t._v("#")]),t._v(" No:5 "),a("a",{attrs:{href:""}},[t._v("机器人繁殖")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("X星系的机器人可以自动复制自己。它们用1年的时间可以复制出2个自己，然后就失去复制能力。\n每年X星系都会选出1个新出生的机器人发往太空。也就是说，如果X星系原有机器人5个，\n1年后总数是：5 + 9 = 14\n2年后总数是：5 + 9 + 17 = 31\n\n如果已经探测经过n年后的机器人总数s，你能算出最初有多少机器人吗？\n\n数据格式：\n\n输入一行两个数字n和s，用空格分开，含义如上。n不大于100，s位数不超过50位。\n\n要求输出一行，一个整数，表示最初有机器人多少个。\n\n例如：\n用户输入：\n2 31\n\n则程序应该输出：\n5\n\n再例如：\n用户输入：\n97 2218388550399401452619230609499\n\n则程序应该输出：\n8 \n\n")])])]),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\n\nint main(int argc, char** argv) {\n\tint n, s,cnt;\n\tvector<int> lis;\n\tcin >> n >> s;\n\tfor (int i=1; ; i++) {//从1个机器人逐步递增计算\n\t\tcnt = i;\n\t\tlis.push_back(i);\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tcnt += lis[lis.size() - 1] * 2 - 1;\n\t\t\tlis.push_back(lis[lis.size() - 1] * 2 - 1);\n\t\t}\n\t\tif(cnt == s) {\n\t\t\tcout << i;\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n")])])]),a("h2",{attrs:{id:"no-6-递增三元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-6-递增三元组","aria-hidden":"true"}},[t._v("#")]),t._v(" No:6 "),a("a",{attrs:{href:""}},[t._v("递增三元组")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("给定三个整数数组\nA = "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" AN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \nB = "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("B1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" BN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \nC = "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("C1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" C2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" CN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("，\n请你统计有多少个三元组(i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k) 满足：\n1. 1 <= i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k <= N  \n2. Ai < Bj < Ck  \n\n【输入格式】 \n第一行包含一个整数N。\n第二行包含N个整数A1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" AN。\n第三行包含N个整数B1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" BN。\n第四行包含N个整数C1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" C2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" CN。\n\n对于30%的数据，1 <= N <= 100  \n对于60%的数据，1 <= N <= 1000 \n对于100%的数据，1 <= N <= 100000 0 <= Ai"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Bi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Ci <= 100000 \n\n【输出格式】\n一个整数表示答案\n【样例输入】\n3\n1 1 1\n2 2 2\n3 3 3\n\n【样例输出】\n\n27 \n\n【样例输入】\n\n3\n1 2 3\n2 3 5\n3 4 5\n【样例输出】\n7\n")])])]),a("p",[a("em",[t._v("使用"),a("code",[t._v("lower_bound()")]),t._v("找到a中有多少个小于b的，b中有多少个小于c的，"),a("code",[t._v("lower_bound()")]),t._v("二分查找并返回第一个大于等于key的值位置，令其减去起始位置就能得到数量，将乘积累加即可")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nint a[100002],b[100002],c[100002];\nint main(int argc, char** argv) {\n\tint n,cnt=0;\n\tcin>>n;\n\tfor(int i=0; i<n; i++) {\n\t\tcin>>a[i];\n\t};\n\tfor(int i=0; i<n; i++) {\n\t\tcin>>b[i];\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcin>>c[i];\n\t}\n\tsort(a,a+n);\n\tsort(b,b+n);\n\tsort(c,c+n);\n\tfor(int i=0; i<n; i++) {\n\t\tint k1 = (lower_bound(a,a+n,b[i]) - a);\n\t\tint k2 = (lower_bound(b,b+n,c[i]) - b);\n\t\tcnt += k1*k2;\n\t}\n\tcout<<cnt;\n\treturn 0;\n}\n")])])]),a("h2",{attrs:{id:"no-7-第几个幸运数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-7-第几个幸运数","aria-hidden":"true"}},[t._v("#")]),t._v(" No:7 "),a("a",{attrs:{href:""}},[t._v("第几个幸运数")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("到x星球旅行的游客都被发给一个整数，作为游客编号。 \nx星的国王有个怪癖，他只喜欢数字3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("5和7。 \n国王规定，游客的编号如果只含有因子：3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("就可以获得一份奖品。\n\n我们来看前10个幸运数字是： \n3 5 7 9 15 21 25 27 35 45 \n因而第11个幸运数字是：49\n\n小明领到了一个幸运数字 59084709587505，他去领奖的时候，人家要求他准确地说出这是第几个幸运数字，否则领不到奖品。\n请你帮小明计算一下，59084709587505是第几个幸运数字。\n需要提交的是一个整数，请不要填写任何多余内容。\n")])])]),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#include <bits/stdc++.h>\nusing namespace std;\nint dir[3]= {3,5,7};\nlong long lucky=59084709587505;\nset<long long> lis;//利用set去重,用vector的话需要先排序后用unique去重。\nint main(int argc, char** argv) {\n\tlong long tem=1;\n\twhile(true) {\n\t\tfor(int i=0; i<3; i++) {\n\t\t\tif(tem*dir[i]<=lucky) {\n\t\t\t\tlis.insert(tem*dir[i]);\n\t\t\t}\n\t\t}\n\t\ttem=*lis.upper_bound(tem);//返回最后一个大于tem的数\n\t\tcout<<tem<<" " ;\n\t\tif(tem==lucky) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tcout<<lis.size();\n\treturn 0;\n}\n')])])]),a("h2",{attrs:{id:"no-8-连号区间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-8-连号区间","aria-hidden":"true"}},[t._v("#")]),t._v(" No:8 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T30",target:"_blank",rel:"noopener noreferrer"}},[t._v("连号区间"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("序列max-min =lenth时即可认为连号，单独一个数字也可以认为连号")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nint main(int argc, char** argv) {\n\tint lis[50000];\n\tint n,cnt=0,left,right;\n\tcin>>n;\n\tfor(int i=0; i<n; i++) {\n\t\tcin>>lis[i];\n\t}\n\tfor(int i=0; i<n; i++) {\n\t\tcnt ++ ;\n\t\tleft = right = lis[i] ;\n\t\tfor( int j = i+1 ; j < n ; j ++ ) {\n\t\t\tleft = min( left , lis[j] );\n\t\t\tright= max( right, lis[j] );\n\t\t\tcnt += ( right-left == j-i );\n\t\t}\n\t}\n\tcout<<cnt;\n\treturn 0;\n}\n")])])]),a("h2",{attrs:{id:"no-9-核桃的数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-9-核桃的数量","aria-hidden":"true"}},[t._v("#")]),t._v(" No:9 "),a("a",{attrs:{href:"http://lx.lanqiao.cn/problem.page?gpid=T24",target:"_blank",rel:"noopener noreferrer"}},[t._v("核桃的数量"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("关于求最小公倍数的问题，求三个数的最小公倍数，但也不复杂，最开始是想先求两个数的最小公倍数，然后再求其和第三个数的最小公倍数。后来想想直接求三个数的最小公倍数也不复杂，直接取三个数中的最大值，然后如果不能整除其中任意一个数，就递增，直到能同时整除三个数为止。")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include <bits/stdc++.h>\nusing namespace std;\nint check_lcm(int x,int y,int z) {\n\tint value;\n\tvalue=max(x,max(y,z));\n\twhile((value%x!=0)||(value%y!=0)||(value%z!=0)) {\n\t\tvalue++;\n\t}\n\treturn value;\n}\nint main(int argc, char** argv) {\n\tint a,b,c;\n\tcin>>a>>b>>c;\n\tcout<<check_lcm(a,b,c);\n\treturn 0;\n}\n")])])])])},[],!1,null,null,null);n.default=s.exports}}]);